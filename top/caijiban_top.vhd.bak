


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;



entity caijiban_top is
port	
(
 --dac interface
   dac_dataclko : in  std_logic                     ;
   dac_dataclki : out std_logic                     ;
   dac_data     : out std_logic_vector(13 downto 0) ;  
   dac_reset    : out std_logic                     ;
   dac_irq      : out std_logic                     ;
   dac_cs       : out std_logic                     ;
   dac_sdio     : out std_logic                     ;
   dac_sclk     : out std_logic                     ;
   dac_sdo      : out std_logic                     ;
   dac_mode     : out std_logic                     ;
 
 --adc interface 
   adc_fsr      : out std_logic                     ;
   adc_ddrph    : out std_logic                     ;
   adc_des      : out std_logic                     ;
   adc_ndm      : out std_logic                     ;
   adc_rst      : out std_logic                     ;
   adc_sdo      : in  std_logic                     ;
   adc_sclk     : out std_logic                     ;
   adc_sdi      : out std_logic                     ;
   adc_scs      : out std_logic                     ;
   adc_dclki    : in  std_logic                     ;
   adc_dclkq    : in  std_logic                     ;
   adc_di       : in  std_logic_vector(11 downto 0) ;
   adc_dq       : in  std_logic_vector(11 downto 0) 
 
 
);
end entity caijiban_top ;
	
architecture rtl of caijiban_top is 

component adin is
port(
   --control interface
   adc_fsr            : out std_logic                     ;
   adc_ddrph          : out std_logic                     ;
   adc_des            : out std_logic                     ;
   adc_ndm            : out std_logic                     ;
   adc_rst            : out std_logic                     ;
   adc_sdo            : in  std_logic                     ;
   adc_sclk           : out std_logic                     ;
   adc_sdi            : out std_logic                     ;
   adc_scs            : out std_logic                     ;
   --data clk interface
   adc_dclki          :  in std_logic                     ;
   adc_dclkq          :  in std_logic                     ;
   adc_di             :  in std_logic_vector(11 downto 0) ; 
   adc_dq             :  in std_logic_vector(11 downto 0) ;
   --adc usr interface
   adc_d0             : out std_logic_vector(11 downto 0) ;   
   adc_d1             : out std_logic_vector(11 downto 0) ;
   adc_d2             : out std_logic_vector(11 downto 0) ;
   adc_d3             : out std_logic_vector(11 downto 0) ;   
   adc_d4             : out std_logic_vector(11 downto 0) ;   
   adc_d5             : out std_logic_vector(11 downto 0) ;
   adc_d6             : out std_logic_vector(11 downto 0) ;
   adc_d7             : out std_logic_vector(11 downto 0) ;     		
   data_rx_outclock   : out std_logic        	
); 
end component ;
	
	
component dacout is
port(
 -- usr interface
  dac_usr_clk    : out std_logic                      ;
  dac_usr_data   : in  std_logic_vector(111 downto 0) ;
  use_test_data  : in  std_logic                      ;
 
 -- dac chip interface
 dac_dataclko  : in  std_logic                     ;
 dac_dataclki  : out std_logic                     ;
 dac_data      : out std_logic_vector(13 downto 0) ;
 dac_reset     : out std_logic                     ;
 dac_irq       : out std_logic                     ;
 dac_cs        : out std_logic                     ;
 dac_sdio      : out std_logic                     ;
 dac_sclk      : out std_logic                     ;
 dac_sdo       : out std_logic                     ;
 dac_mode      : out std_logic                     
);                                     
end component ;
 
 
component MOD_QPSK_16QAM is
generic(kOutSize : positive := 14);
port(
		aReset : in std_logic;
		--mode : in std_logic_vector(1 downto 0);
		--TCXO_1944 : in std_logic;
		--DA_DCO : in std_logic;
		--DA_sdo : in std_logic;
		clk_50	: in std_logic;
		clk_150	: in std_logic;
	
		IFData_0	: OUT std_logic_vector(kOutSize - 1 downto 0);
		IFData_1	: OUT std_logic_vector(kOutSize - 1 downto 0);
		IFData_2	: OUT std_logic_vector(kOutSize - 1 downto 0);
		IFData_3  : OUT std_logic_vector(kOutSize - 1 downto 0);
		IFData_4	: OUT std_logic_vector(kOutSize - 1 downto 0);
		IFData_5  : OUT std_logic_vector(kOutSize - 1 downto 0);
		IFData_6	: OUT std_logic_vector(kOutSize - 1 downto 0);
		IFData_7  : OUT std_logic_vector(kOutSize - 1 downto 0)
		);
end component;
	
component	Demod_Para	is
generic	(
			kInSize  : positive :=8
		);
port	(
		aReset          : in  std_logic; 
		clk_100         : in  std_logic;
		pclk_I			: in  std_logic;  -- 50MHz
		
		AD_d0			: in std_logic_vector(kInSize-1 downto 0);
		AD_d1			: in std_logic_vector(kInSize-1 downto 0);
		AD_d2			: in std_logic_vector(kInSize-1 downto 0);
		AD_d3           : in std_logic_vector(kInSize-1 downto 0);
		AD_d4			: in std_logic_vector(kInSize-1 downto 0);
		AD_d5           : in std_logic_vector(kInSize-1 downto 0);
		AD_d6           : in std_logic_vector(kInSize-1 downto 0);
		AD_d7           : in std_logic_vector(kInSize-1 downto 0);
		
		err_test 	: out std_logic
		
		);
end component;		
	
	
component cpm is 
port
(
	adc_if_clk_out : in  std_logic ; -- 100MHZ
	adc_demo_clk   : out std_logic ; -- 100MHZ
	adc_demo_p_clk : out std_logic ; -- 50MHZ
	adc_demo_rst   : out std_logic ; 
	dac_if_clk_out : in  std_logic ; -- 150MHZ
	dac_out_clk    : out std_logic ; -- 150MHZ
	dac_source_clk : out std_logic ; -- 50MHZ
	dac_source_rst : out std_logic 
);
end component;
	
	
	component	NCO_310_1200_p8	is
	 generic(
		kDataWidth  : positive :=14 );
port(
		aReset	: in std_logic;
		pclk		: in std_logic;

		sin_p0		: out signed(kDataWidth-1 downto 0);
		sin_p1		: out signed(kDataWidth-1 downto 0);
		sin_p2		: out signed(kDataWidth-1 downto 0);
		sin_p3		: out signed(kDataWidth-1 downto 0);
		sin_p4		: out signed(kDataWidth-1 downto 0);
		sin_p5		: out signed(kDataWidth-1 downto 0);
		sin_p6		: out signed(kDataWidth-1 downto 0);
		sin_p7		: out signed(kDataWidth-1 downto 0);

		cos_p0		: out signed(kDataWidth-1 downto 0);
		cos_p1		: out signed(kDataWidth-1 downto 0);
		cos_p2		: out signed(kDataWidth-1 downto 0);
		cos_p3		: out signed(kDataWidth-1 downto 0);
		cos_p4		: out signed(kDataWidth-1 downto 0);
		cos_p5		: out signed(kDataWidth-1 downto 0);
		cos_p6		: out signed(kDataWidth-1 downto 0);
		cos_p7		: out signed(kDataWidth-1 downto 0)
		);
end	component;

	
	

  signal   dac_usr_clk    : std_logic                      ;
  signal   dac_usr_data   : std_logic_vector(111 downto 0) ;
  signal   use_test_data  : std_logic                      ;
 
	signal  dac_if_clk_out  :  std_logic                     ; -- 150MHZ
	signal  dac_out_clk     :  std_logic                     ; -- 150MHZ
	signal  dac_source_clk  :  std_logic                     ; -- 50MHZ
	signal  dac_source_rst  :  std_logic                     ;
	
	signal  dac_inp0_data     : std_logic_vector(13 downto 0) ;
	signal  dac_inp1_data     : std_logic_vector(13 downto 0) ;
	signal  dac_inp2_data     : std_logic_vector(13 downto 0) ;
	signal  dac_inp3_data     : std_logic_vector(13 downto 0) ;
	signal  dac_inp4_data     : std_logic_vector(13 downto 0) ;
	signal  dac_inp5_data     : std_logic_vector(13 downto 0) ;
	signal  dac_inp6_data     : std_logic_vector(13 downto 0) ;
	signal  dac_inp7_data     : std_logic_vector(13 downto 0) ;
		
  -- adc signal 
  signal  data_rx_outclock  : std_logic        	            ;
  signal 	adc_demo_clk      : std_logic                     ;
	signal  adc_demo_p_clk    : std_logic                     ;
	signal  adc_demo_rst      : std_logic                     ;
    
  signal demo_err_test      : std_logic                     ;
  signal adc_d0			        : std_logic_vector(11 downto 0) ;
	signal adc_d1			        : std_logic_vector(11 downto 0) ;
	signal adc_d2			        : std_logic_vector(11 downto 0) ;
	signal adc_d3             : std_logic_vector(11 downto 0) ;
	signal adc_d4			        : std_logic_vector(11 downto 0) ;
	signal adc_d5             : std_logic_vector(11 downto 0) ;
	signal adc_d6             : std_logic_vector(11 downto 0) ;
	signal adc_d7             : std_logic_vector(11 downto 0) ;      
		
		
	signal demo_adc_d0        : std_logic_vector(11 downto 0) ;
  signal demo_adc_d1        : std_logic_vector(11 downto 0) ;
  signal demo_adc_d2        : std_logic_vector(11 downto 0) ;
  signal demo_adc_d3        : std_logic_vector(11 downto 0) ;
  signal demo_adc_d4        : std_logic_vector(11 downto 0) ;
  signal demo_adc_d5        : std_logic_vector(11 downto 0) ;
  signal demo_adc_d6        : std_logic_vector(11 downto 0) ;
  signal demo_adc_d7        : std_logic_vector(11 downto 0) ;
	
		
		
        
									
	
begin
 	
 	
  use_test_data <= '0' ;


-- inst cpm
inst_cpm: cpm 
port map
(
	adc_if_clk_out => data_rx_outclock ,  -- 100MHZ
	adc_demo_clk   => adc_demo_clk     ,  -- 100MHZ
	adc_demo_p_clk => adc_demo_p_clk   ,  -- 50MHZ
	adc_demo_rst   => adc_demo_rst     ,
	dac_if_clk_out => dac_if_clk_out   ,  -- 150MHZ
	dac_out_clk    => dac_out_clk      ,  -- 150MHZ
	dac_source_clk => dac_source_clk   ,  -- 50MHZ
	dac_source_rst => dac_source_rst   
);


 -- inst dac module
dacout_inst: dacout
port map
(
 -- usr interface
 dac_usr_clk      => dac_if_clk_out,
 dac_usr_data     => dac_usr_data  ,
 use_test_data    => use_test_data ,
 -- dac chip interface
 dac_dataclki     => dac_dataclki  ,
 dac_dataclko     => dac_dataclko  ,
 dac_data         => dac_data      ,
 dac_reset        => dac_reset     ,
 dac_irq          => dac_irq       ,
 dac_cs           => dac_cs        ,
 dac_sdio         => dac_sdio      ,
 dac_sclk         => dac_sclk      ,
 dac_sdo          => dac_sdo       ,
 dac_mode         => dac_mode      
);




dac_mod_inst: MOD_QPSK_16QAM 
generic map
  (kOutSize => 14)
port map
  (
		aReset    => dac_source_rst ,
		clk_50	  => dac_source_clk ,  -- 50MHZ
		clk_150	  => dac_out_clk    ,  -- 150MHZ
		IFData_0	=> dac_inp0_data  ,
		IFData_1	=> dac_inp1_data  ,
		IFData_2	=> dac_inp2_data  , 
		IFData_3  => dac_inp3_data  ,
		IFData_4	=> dac_inp4_data  ,
		IFData_5  => dac_inp5_data  , 
		IFData_6	=> dac_inp6_data  ,
		IFData_7  => dac_inp7_data  
		);
		
		
--inst_nco:	NCO_310_1200_p8	
--	 generic map(
--		kDataWidth  => 14 
--		)
--port map (
--		aReset	=> dac_source_rst,
--		pclk		=> dac_out_clk ,
--
--		std_logic_vector(sin_p0)	=> dac_inp0_data ,
--		std_logic_vector(sin_p1)	=> dac_inp1_data ,
--		std_logic_vector(sin_p2)	=> dac_inp2_data ,
--		std_logic_vector(sin_p3)	=> dac_inp3_data ,
--		std_logic_vector(sin_p4)	=> dac_inp4_data ,
--		std_logic_vector(sin_p5)	=> dac_inp5_data ,
--		std_logic_vector(sin_p6)	=> dac_inp6_data ,
--		std_logic_vector(sin_p7)	=> dac_inp7_data ,
--
--		cos_p0		=> open ,
--		cos_p1		=> open ,
--		cos_p2		=> open ,
--		cos_p3		=> open ,
--		cos_p4		=> open ,
--		cos_p5		=> open ,
--		cos_p6		=> open ,
--		cos_p7		=> open 
--		);
							
	dac_usr_data	<= (dac_inp0_data(13)) & dac_inp0_data(12 downto 0) &
             	     (dac_inp1_data(13)) & dac_inp1_data(12 downto 0) &
							     (dac_inp2_data(13)) & dac_inp2_data(12 downto 0) &
							     (dac_inp3_data(13)) & dac_inp3_data(12 downto 0) &
							     (dac_inp4_data(13)) & dac_inp4_data(12 downto 0) &
							     (dac_inp5_data(13)) & dac_inp5_data(12 downto 0) &
							     (dac_inp6_data(13)) & dac_inp6_data(12 downto 0) &
							     (dac_inp7_data(13)) & dac_inp7_data(12 downto 0);		
							     	
							     	
							     	

 -- inst adc moduel
adcin_inst: adin 
port map
(
 --control interface
 adc_fsr          => adc_fsr          ,
 adc_ddrph        => adc_ddrph        ,
 adc_des          => adc_des          ,
 adc_ndm          => adc_ndm          ,
 adc_rst          => adc_rst          ,
 adc_sdo          => adc_sdo          ,
 adc_sclk         => adc_sclk         ,
 adc_sdi          => adc_sdi          ,
 adc_scs          => adc_scs          ,
 --data clk interface
 adc_dclki        => adc_dclki        ,
 adc_dclkq        => adc_dclkq        ,
 adc_di           => adc_di           ,
 adc_dq           => adc_dq           ,
 --adc usr interface   
 adc_d0           => adc_d0           ,     
 adc_d1           => adc_d1           ,     
 adc_d2           => adc_d2           ,     
 adc_d3           => adc_d3           ,     
 adc_d4           => adc_d4           ,     
 adc_d5           => adc_d5           ,     
 adc_d6           => adc_d6           ,     
 adc_d7           => adc_d7           ,    
 data_rx_outclock => data_rx_outclock 

);
	
	
-- convert binary offset data to two complete format
demo_adc_d0 <= (not adc_d0(11)) & adc_d0(10 downto 0) ;
demo_adc_d1 <= (not adc_d1(11)) & adc_d1(10 downto 0) ;
demo_adc_d2 <= (not adc_d2(11)) & adc_d2(10 downto 0) ;
demo_adc_d3 <= (not adc_d3(11)) & adc_d3(10 downto 0) ;	
demo_adc_d4 <= (not adc_d4(11)) & adc_d4(10 downto 0) ;
demo_adc_d5 <= (not adc_d5(11)) & adc_d5(10 downto 0) ;
demo_adc_d6 <= (not adc_d6(11)) & adc_d6(10 downto 0) ;					
demo_adc_d7 <= (not adc_d7(11)) & adc_d7(10 downto 0) ;
	
demo_inst:	Demod_Para	
generic	map
   (
			kInSize  => 8
		)
port map
	(              
		aReset    => adc_demo_rst        ,
		clk_100   => adc_demo_clk        ,
		pclk_I		=> adc_demo_p_clk      ,  
		
		AD_d0			=> adc_d0(11 downto 4) ,
		AD_d1			=> adc_d1(11 downto 4) ,
		AD_d2			=> adc_d2(11 downto 4) ,
		AD_d3     => adc_d3(11 downto 4) ,
		AD_d4			=> adc_d4(11 downto 4) ,
		AD_d5     => adc_d5(11 downto 4) ,
		AD_d6     => adc_d6(11 downto 4) ,
		AD_d7     => adc_d7(11 downto 4) ,
		
		err_test 	=> demo_err_test  
		
		);	
		
		

end architecture rtl ;