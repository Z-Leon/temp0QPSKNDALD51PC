--！！！！！！！！！！！！！！！！！！！！！！！！！！！！
--Author: Jiang Long (30-Sep-2014)  Auto Generated by NCO_VHDL_gen.m
--Function: NCO (serial or parallel)

--Sampling Clk :1200
--Signal frequency :200
--Parallel Num :8
--Output sequence: p0, p1, p2, p3,...
--！！！！！！！！！！！！！！！！！！！！！！！！！！！！
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity	NCO_200_1200_p8	is
	 generic(
		kDataWidth  : positive :=16 );
port(
		aReset	: in std_logic;
		pclk		: in std_logic;

		sin_p0		: out signed(kDataWidth-1 downto 0);
		sin_p1		: out signed(kDataWidth-1 downto 0);
		sin_p2		: out signed(kDataWidth-1 downto 0);
		sin_p3		: out signed(kDataWidth-1 downto 0);
		sin_p4		: out signed(kDataWidth-1 downto 0);
		sin_p5		: out signed(kDataWidth-1 downto 0);
		sin_p6		: out signed(kDataWidth-1 downto 0);
		sin_p7		: out signed(kDataWidth-1 downto 0);

		cos_p0		: out signed(kDataWidth-1 downto 0);
		cos_p1		: out signed(kDataWidth-1 downto 0);
		cos_p2		: out signed(kDataWidth-1 downto 0);
		cos_p3		: out signed(kDataWidth-1 downto 0);
		cos_p4		: out signed(kDataWidth-1 downto 0);
		cos_p5		: out signed(kDataWidth-1 downto 0);
		cos_p6		: out signed(kDataWidth-1 downto 0);
		cos_p7		: out signed(kDataWidth-1 downto 0)
		);
end	NCO_200_1200_p8;

architecture rtl of	NCO_200_1200_p8	is 
	type DataArray is array (natural range <>) of signed(kDataWidth-1 downto 0);
	signal sin_p0_reg: DataArray(2 downto 0);
	signal sin_p1_reg: DataArray(2 downto 0);
	signal sin_p2_reg: DataArray(2 downto 0);
	signal sin_p3_reg: DataArray(2 downto 0);
	signal sin_p4_reg: DataArray(2 downto 0);
	signal sin_p5_reg: DataArray(2 downto 0);
	signal sin_p6_reg: DataArray(2 downto 0);
	signal sin_p7_reg: DataArray(2 downto 0);
	signal cos_p0_reg: DataArray(2 downto 0);
	signal cos_p1_reg: DataArray(2 downto 0);
	signal cos_p2_reg: DataArray(2 downto 0);
	signal cos_p3_reg: DataArray(2 downto 0);
	signal cos_p4_reg: DataArray(2 downto 0);
	signal cos_p5_reg: DataArray(2 downto 0);
	signal cos_p6_reg: DataArray(2 downto 0);
	signal cos_p7_reg: DataArray(2 downto 0);		
	signal Initial_flag : std_logic;
	signal counter : integer range 0 to 3 := 0;
begin
	--Process 1
	process (aReset, pclk)
	begin
		if aReset='1' then
			for i in 0 to	2 loop
				sin_p0_reg(i) <= (others=>'0');
				sin_p1_reg(i) <= (others=>'0');
				sin_p2_reg(i) <= (others=>'0');
				sin_p3_reg(i) <= (others=>'0');
				sin_p4_reg(i) <= (others=>'0');
				sin_p5_reg(i) <= (others=>'0');
				sin_p6_reg(i) <= (others=>'0');
				sin_p7_reg(i) <= (others=>'0');
				cos_p0_reg(i) <= (others=>'0');
				cos_p1_reg(i) <= (others=>'0');
				cos_p2_reg(i) <= (others=>'0');
				cos_p3_reg(i) <= (others=>'0');
				cos_p4_reg(i) <= (others=>'0');
				cos_p5_reg(i) <= (others=>'0');
				cos_p6_reg(i) <= (others=>'0');
				cos_p7_reg(i) <= (others=>'0');
			end loop;
			Initial_flag <= '0';
			counter <= 0;

		elsif rising_edge(pclk) then
			if counter /= 3 then
				counter <= counter+1;
				Initial_flag <= '1';
			else
				counter <= 3;
				Initial_flag <= '0';
			end if;
			if Initial_flag = '1' then   -- Initialization
				sin_p0_reg(2) <= to_signed(0,kDataWidth);
				sin_p1_reg(2) <= to_signed(14189,kDataWidth);
				sin_p2_reg(2) <= to_signed(14189,kDataWidth);
				sin_p3_reg(2) <= to_signed(0,kDataWidth);
				sin_p4_reg(2) <= to_signed(-14189,kDataWidth);
				sin_p5_reg(2) <= to_signed(-14189,kDataWidth);
				sin_p6_reg(2) <= to_signed(0,kDataWidth);
				sin_p7_reg(2) <= to_signed(14189,kDataWidth);
				sin_p0_reg(1) <= to_signed(14189,kDataWidth);
				sin_p1_reg(1) <= to_signed(0,kDataWidth);
				sin_p2_reg(1) <= to_signed(-14189,kDataWidth);
				sin_p3_reg(1) <= to_signed(-14189,kDataWidth);
				sin_p4_reg(1) <= to_signed(0,kDataWidth);
				sin_p5_reg(1) <= to_signed(14189,kDataWidth);
				sin_p6_reg(1) <= to_signed(14189,kDataWidth);
				sin_p7_reg(1) <= to_signed(0,kDataWidth);
				sin_p0_reg(0) <= to_signed(-14189,kDataWidth);
				sin_p1_reg(0) <= to_signed(-14189,kDataWidth);
				sin_p2_reg(0) <= to_signed(0,kDataWidth);
				sin_p3_reg(0) <= to_signed(14189,kDataWidth);
				sin_p4_reg(0) <= to_signed(14189,kDataWidth);
				sin_p5_reg(0) <= to_signed(0,kDataWidth);
				sin_p6_reg(0) <= to_signed(-14189,kDataWidth);
				sin_p7_reg(0) <= to_signed(-14189,kDataWidth);
				cos_p0_reg(2) <= to_signed(16384,kDataWidth);
				cos_p1_reg(2) <= to_signed(8192,kDataWidth);
				cos_p2_reg(2) <= to_signed(-8192,kDataWidth);
				cos_p3_reg(2) <= to_signed(-16384,kDataWidth);
				cos_p4_reg(2) <= to_signed(-8192,kDataWidth);
				cos_p5_reg(2) <= to_signed(8192,kDataWidth);
				cos_p6_reg(2) <= to_signed(16384,kDataWidth);
				cos_p7_reg(2) <= to_signed(8192,kDataWidth);
				cos_p0_reg(1) <= to_signed(-8192,kDataWidth);
				cos_p1_reg(1) <= to_signed(-16384,kDataWidth);
				cos_p2_reg(1) <= to_signed(-8192,kDataWidth);
				cos_p3_reg(1) <= to_signed(8192,kDataWidth);
				cos_p4_reg(1) <= to_signed(16384,kDataWidth);
				cos_p5_reg(1) <= to_signed(8192,kDataWidth);
				cos_p6_reg(1) <= to_signed(-8192,kDataWidth);
				cos_p7_reg(1) <= to_signed(-16384,kDataWidth);
				cos_p0_reg(0) <= to_signed(-8192,kDataWidth);
				cos_p1_reg(0) <= to_signed(8192,kDataWidth);
				cos_p2_reg(0) <= to_signed(16384,kDataWidth);
				cos_p3_reg(0) <= to_signed(8192,kDataWidth);
				cos_p4_reg(0) <= to_signed(-8192,kDataWidth);
				cos_p5_reg(0) <= to_signed(-16384,kDataWidth);
				cos_p6_reg(0) <= to_signed(-8192,kDataWidth);
				cos_p7_reg(0) <= to_signed(8192,kDataWidth);
			else
				for i in 1 to	2 loop
					sin_p0_reg(i) <= sin_p0_reg(i-1);
					sin_p1_reg(i) <= sin_p1_reg(i-1);
					sin_p2_reg(i) <= sin_p2_reg(i-1);
					sin_p3_reg(i) <= sin_p3_reg(i-1);
					sin_p4_reg(i) <= sin_p4_reg(i-1);
					sin_p5_reg(i) <= sin_p5_reg(i-1);
					sin_p6_reg(i) <= sin_p6_reg(i-1);
					sin_p7_reg(i) <= sin_p7_reg(i-1);
					cos_p0_reg(i) <= cos_p0_reg(i-1);
					cos_p1_reg(i) <= cos_p1_reg(i-1);
					cos_p2_reg(i) <= cos_p2_reg(i-1);
					cos_p3_reg(i) <= cos_p3_reg(i-1);
					cos_p4_reg(i) <= cos_p4_reg(i-1);
					cos_p5_reg(i) <= cos_p5_reg(i-1);
					cos_p6_reg(i) <= cos_p6_reg(i-1);
					cos_p7_reg(i) <= cos_p7_reg(i-1);
				end loop;

					sin_p0_reg(0) <= sin_p0_reg(2);
					sin_p1_reg(0) <= sin_p1_reg(2);
					sin_p2_reg(0) <= sin_p2_reg(2);
					sin_p3_reg(0) <= sin_p3_reg(2);
					sin_p4_reg(0) <= sin_p4_reg(2);
					sin_p5_reg(0) <= sin_p5_reg(2);
					sin_p6_reg(0) <= sin_p6_reg(2);
					sin_p7_reg(0) <= sin_p7_reg(2);
					cos_p0_reg(0) <= cos_p0_reg(2);
					cos_p1_reg(0) <= cos_p1_reg(2);
					cos_p2_reg(0) <= cos_p2_reg(2);
					cos_p3_reg(0) <= cos_p3_reg(2);
					cos_p4_reg(0) <= cos_p4_reg(2);
					cos_p5_reg(0) <= cos_p5_reg(2);
					cos_p6_reg(0) <= cos_p6_reg(2);
					cos_p7_reg(0) <= cos_p7_reg(2);
			end if;
		end if;
	end process;

	--output
	sin_p0 <= sin_p0_reg(2);
	sin_p1 <= sin_p1_reg(2);
	sin_p2 <= sin_p2_reg(2);
	sin_p3 <= sin_p3_reg(2);
	sin_p4 <= sin_p4_reg(2);
	sin_p5 <= sin_p5_reg(2);
	sin_p6 <= sin_p6_reg(2);
	sin_p7 <= sin_p7_reg(2);
	cos_p0 <= cos_p0_reg(2);
	cos_p1 <= cos_p1_reg(2);
	cos_p2 <= cos_p2_reg(2);
	cos_p3 <= cos_p3_reg(2);
	cos_p4 <= cos_p4_reg(2);
	cos_p5 <= cos_p5_reg(2);
	cos_p6 <= cos_p6_reg(2);
	cos_p7 <= cos_p7_reg(2);
end rtl;
